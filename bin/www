#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
*/

const app = require('../server');
const http = require('http');

const path = require('path');
const logger = require('../utils/logger');
const log = logger.child({type: 'module:' + path.basename(__filename)});

/**
 * Create HTTP server.
*/

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
*/

server.listen(app.get('port'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
*/

function onError(error) {
  const port = app.get('port');
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges', () => {
        process.exit(-1);
      });
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use', () => {
        process.exit(-1);
      });
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log.info('Server started on ' + bind);
}
